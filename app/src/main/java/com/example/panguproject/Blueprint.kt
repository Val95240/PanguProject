package com.example.panguproject

class Blueprint(
    name: String,
    costDescription: String? = null,
    shortCostDescription: String? = null,
    effectDescription: String? = null,
    shortEffectDescription: String? = null,
    val costFunction: ((diceList: List<Dice>) -> Boolean)? = null,
    val clickCostFunction: ((diceList: List<Dice>) -> Boolean)? = null,
    val click: ((gameViewModel: GameViewModel) -> Unit)? = null,
    val startTurn: ((gameViewModel: GameViewModel) -> Unit)? = null,
    val onBuy: ((gameViewModel: GameViewModel) -> Unit)? = null,
    val canApply: ((gameViewModel: GameViewModel) -> Boolean) = { true },
) : DetailCard(
    name,
    costDescription,
    shortCostDescription,
    effectDescription,
    shortEffectDescription,
) {
    var usable: Boolean = (click != null)

    fun copy(used: Boolean): Blueprint {
        val blueprint = Blueprint(
            name,
            costDescription,
            shortCostDescription,
            effectDescription,
            shortEffectDescription,
            costFunction,
            clickCostFunction,
            click,
            startTurn,
            onBuy,
            canApply,
        )
        if (used)
            blueprint.usable = false
        return blueprint
    }
}

val defaultBuildingsList: List<Blueprint> = listOf(
    Blueprint(
        "Laboratory",
        effectDescription = "Consume a pair of dice to draw a blueprint.",
        shortEffectDescription = "Pair ->\nDraw a blueprint",
        clickCostFunction = Dice::isPair,
        click = GameViewModel::drawBlueprint
    ),
    Blueprint("Forge",
        effectDescription = "Consume three in a row to gain a stored wild die.",
        shortEffectDescription = "Three in a row ->\nStored wild die",
        clickCostFunction = Dice::isPair,
        click = GameViewModel::drawBlueprint),
)

val allBlueprintsList: List<Blueprint> = listOf(
    Blueprint(
        "3D Printer",
        costDescription = "Three dice of value 1, 2 and 3.",
        shortCostDescription = "1, 2, 3",
        effectDescription = "On click: turn a die of value 1 into a wild die.",
        shortEffectDescription = "Click: 1 ->\nwild",
        costFunction = Dice::isPair,
        clickCostFunction = Dice::isPair,
        click = GameViewModel::modMinus,
    ),
    Blueprint(
        "Backup Plan",
        costDescription = "Three dice of a kind.",
        shortCostDescription = "Three of a kind",
        effectDescription = "When built: gain a stored wild die.\nOn end of turn: gain a stored wild die if no buildings were purchased this turn.",
        shortEffectDescription = "EOT: +1 stored wild\nif no card built",
        costFunction = Dice::isPair,
        clickCostFunction = Dice::isPair,
        click = GameViewModel::modPlus,
    ),
    Blueprint(
        "Bionic Robot",
        costDescription = "Four dice of a kind.",
        shortCostDescription = "Four of a kind",
        effectDescription = "When rolling, if exactly one die is rerolled, gain an additional basic die.",
        shortEffectDescription = "Reroll: +1 basic die",
        costFunction = Dice::isPair,
        clickCostFunction = Dice::isPair,
        click = GameViewModel::modPlus,
    ),
    Blueprint(
        "Clone Machine",
        costDescription = "Five dice in a row.",
        shortCostDescription = "Five in a row",
        effectDescription = "On click: generate a fixed copy of a selected die.",
        shortEffectDescription = "Click: 1 die ->\nfixed copy",
        costFunction = Dice::isPair,
        clickCostFunction = Dice::isPair,
        click = GameViewModel::modPlus,
    ),
) + (1..2).map {
    Blueprint(
        "Cryosleep",
        costDescription = "Three dice of value 1, 3 and 5.",
        shortCostDescription = "1, 3, 5",
        effectDescription = "On click: fix a selected die and store it.",
        shortEffectDescription = "Click: a die ->\nfix and store",
        costFunction = Dice::isPair,
        clickCostFunction = Dice::isPair,
        click = GameViewModel::modPlus,
    )
} + listOf(
    Blueprint(
        "Dome",
        costDescription = "Three dice of value 6.",
        shortCostDescription = "6, 6, 6",
        effectDescription = "At the start of turn, gain a fixed die of value 6.",
        shortEffectDescription = "Start of turn:\ngain a fixed 6",
        costFunction = Dice::isPair,
        clickCostFunction = Dice::isPair,
        click = GameViewModel::modPlus,
    )
) + (1..6).map {
    Blueprint(
        "Drone",
        costDescription = "A triple of dice of value $it.",
        shortCostDescription = "$it, $it, $it",
        effectDescription = "On start of turn: gain a fixed die of value $it.",
        shortEffectDescription = "Start of turn:\ngain a fixed $it",
        costFunction = Dice::isPair,
        clickCostFunction = Dice::isPair,
        click = GameViewModel::modPlus,
    )
} + listOf(
    Blueprint(
        "Battery Storage",
        costDescription = "Four dice of a kind.",
        shortCostDescription = "Four of a kind",
        effectDescription = "On end of turn: if at least two dice remain, roll two extra basic dice on the next turn.",
        shortEffectDescription = "EOT: â‰¥2 dice left ->\n+2 basic dice",
        costFunction = Dice::isPair,
        clickCostFunction = Dice::isPair,
        click = GameViewModel::modPlus,
    ),
    Blueprint(
        "Extractor",
        costDescription = "Three dice of value 4, 5, 6.",
        shortCostDescription = "4, 5, 6",
        effectDescription = "On click: consume a pair to gain a stored wild die.",
        shortEffectDescription = "Click: a pair ->\nstored wild die",
        costFunction = Dice::isPair,
        clickCostFunction = Dice::isPair,
        click = GameViewModel::modPlus,
    ),
    Blueprint(
        "Fission",
        costDescription = "A set of dice that amounts to exactly 20.",
        shortCostDescription = "Sum = 20",
        effectDescription = "On click: split a die into two dice.",
        shortEffectDescription = "Click: a die->\ntwo dice w/ same sum",
        costFunction = Dice::isPair,
        clickCostFunction = Dice::isPair,
        click = GameViewModel::modPlus,
    ),
    Blueprint(
        "Fusion",
        costDescription = "A set of dice that amounts to exactly 12.",
        shortCostDescription = "Sum = 12",
        effectDescription = "On click: combine two selected dice into a die of their sum.",
        shortEffectDescription = "Click: 2 dice->\na die of their sum",
        costFunction = Dice::isPair,
        clickCostFunction = Dice::isPair,
        click = GameViewModel::modPlus,
    ),
    Blueprint(
        "Temp. Settlement",
        costDescription = "Three dice in a row.",
        shortCostDescription = "Three in a row",
        effectDescription = "On start of turn: if the turn number is even, roll a basic die.",
        shortEffectDescription = "Even turn:\n+1 basic die",
        costFunction = Dice::isPair,
        clickCostFunction = Dice::isPair,
        click = GameViewModel::modPlus,
    ),
    Blueprint(
        "Monopole",
        costDescription = "Three dice of even value AND all the remaining dice must be of even value too.",
        shortCostDescription = "Three even\nand all even",
        effectDescription = "On start of turn: gain a fixed die of even value.",
        shortEffectDescription = "Start of turn:\ngain a fixed even",
        costFunction = Dice::isPair,
        clickCostFunction = Dice::isPair,
        click = GameViewModel::modPlus,
    ),
    Blueprint(
        "Monopole",
        costDescription = "Three dice of odd value AND all the remaining dice must be of odd value too.",
        shortCostDescription = "Three odd\nand all odd",
        effectDescription = "On start of turn: gain a fixed die of odd value.",
        shortEffectDescription = "Start of turn:\ngain a fixed odd",
        costFunction = Dice::isPair,
        clickCostFunction = Dice::isPair,
        click = GameViewModel::modPlus,
    ),
    Blueprint(
        "Nanobots",
        costDescription = "Three dice in a row.",
        shortCostDescription = "Three in a row",
        effectDescription = "When built: gain a fixed stored die.\nOn click: reroll a basic or fixed die.",
        shortEffectDescription = "Click: reroll basic\nor fixed die",
        costFunction = Dice::isPair,
        clickCostFunction = Dice::isPair,
        click = GameViewModel::modPlus,
    ),
    Blueprint(
        "O.M.N.I.",
        costDescription = "Five dice of a kind.",
        shortCostDescription = "Five of a kind",
        effectDescription = "On start of turn: gain a stored wild die.",
        shortEffectDescription = "Start of turn:\ngain stored wild die",
        costFunction = Dice::isPair,
        clickCostFunction = Dice::isPair,
        click = GameViewModel::modPlus,
    ),
    Blueprint(
        "Observatory",
        costDescription = "Three dice of value 4, 5 and 6.",
        shortCostDescription = "4, 5, 6",
        effectDescription = "When built: draw a blueprint.\nOn discard: gain one more MOD.",
        shortEffectDescription = "Discard:\n+1 MOD",
        costFunction = Dice::isPair,
        clickCostFunction = Dice::isPair,
        click = GameViewModel::modPlus,
    ),
    Blueprint(
        "Prospector",
        costDescription = "Four dice of a kind.",
        shortCostDescription = "Four of a kind",
        effectDescription = "On start of turn: gain a stored fixed die.",
        shortEffectDescription = "Start of turn:\ngain stored fixed die",
        costFunction = Dice::isPair,
        clickCostFunction = Dice::isPair,
        click = GameViewModel::modPlus,
    ),
    Blueprint(
        "Prototype",
        costDescription = "Three dice in a row.",
        shortCostDescription = "Three in a row",
        effectDescription = "On start of turn: gain a fixed die of random value.",
        shortEffectDescription = "Start of turn:\ngain random fixed die",
        costFunction = Dice::isPair,
        clickCostFunction = Dice::isPair,
        click = GameViewModel::modPlus,
    ),
    Blueprint(
        "Quantum Computer",
        costDescription = "Two pairs of dice in a row. Example: 2, 2, 3, 3.",
        shortCostDescription = "Two pairs\nin a row",
        effectDescription = "On click: reroll all selected basic dice.",
        shortEffectDescription = "Click: reroll all\nselected basic dice",
        costFunction = Dice::isPair,
        clickCostFunction = Dice::isPair,
        click = GameViewModel::modPlus,
    ),
    Blueprint(
        "Radiation",
        costDescription = "A set of dice that amounts to exactly 25.",
        shortCostDescription = "Sum = 25",
        effectDescription = "On click: consume a die to generate two fixed dice of value +1 and -1.",
        shortEffectDescription = "Click: 1 die->\n2 fixed +1/-1",
        costFunction = Dice::isPair,
        clickCostFunction = Dice::isPair,
        click = GameViewModel::modPlus,
    ),
    Blueprint(
        "Reactor",
        costDescription = "A set of dice that amounts to exactly 16.",
        shortCostDescription = "Sum = 16",
        effectDescription = "On click: equalize the value of two selected dice.",
        shortEffectDescription = "Click: 2 dice->\ndistribute their value",
        costFunction = Dice::isPair,
        clickCostFunction = Dice::isPair,
        click = GameViewModel::modPlus,
    ),
    Blueprint(
        "Recycler",
        costDescription = "Three dice of a kind.",
        shortCostDescription = "Three of a kind",
        effectDescription = "When spending a wild die: roll an extra basic die at the start of next turn.",
        shortEffectDescription = "Use wild die ->\n+1 die next turn",
        costFunction = Dice::isPair,
        clickCostFunction = Dice::isPair,
        click = GameViewModel::modPlus,
    ),
    Blueprint(
        "Replicator",
        costDescription = "Two wild dice.",
        shortCostDescription = "Two wilds",
        effectDescription = "On start of turn: gain a wild die.",
        shortEffectDescription = "Start of turn:\ngain wild die",
        costFunction = Dice::isPair,
        clickCostFunction = Dice::isPair,
        click = GameViewModel::modPlus,
    ),
    Blueprint(
        "Self-Repair",
        costDescription = "Four dice of a kind.",
        shortCostDescription = "Four of a kind",
        effectDescription = "On end of turn: if all non-stored diced have been used, gain two basic dice next turn.",
        shortEffectDescription = "EOT: 0 non-stored ->\n+2 basic next turn",
        costFunction = Dice::isPair,
        clickCostFunction = Dice::isPair,
        click = GameViewModel::modPlus,
    ),
) + (1..2).map {
    Blueprint(
        "Settlement",
        costDescription = "Four dice in a row.",
        shortCostDescription = "Four in a row",
        effectDescription = "On start of turn: gain a basic die.",
        shortEffectDescription = "Start of turn:\ngain basic die",
        costFunction = Dice::isPair,
        clickCostFunction = Dice::isPair,
        click = GameViewModel::modPlus,
    )
} + listOf(
    Blueprint(
        "Shuttle",
        costDescription = "Three dice of a kind.",
        shortCostDescription = "Three of a kind",
        effectDescription = "When built: gain +2 MOD.\nDice might be MODed from 1 to 6 and 6 to 1.",
        shortEffectDescription = "Can MOD 1 <-> 6",
        costFunction = Dice::isPair,
        clickCostFunction = Dice::isPair,
        click = GameViewModel::modPlus,
    ),
    Blueprint(
        "Tourist Attraction",
        costDescription = "Three dice of value 1, 2 and 3.",
        shortCostDescription = "1, 2, 3",
        effectDescription = "On start of turn: roll one extra basic die per project built.",
        shortEffectDescription = "Start of turn:\n+1 die / project built",
        costFunction = Dice::isPair,
        clickCostFunction = Dice::isPair,
        click = GameViewModel::modPlus,
    ),
    Blueprint(
        "Training Camp",
        costDescription = "Two pairs of dice in a row.",
        shortCostDescription = "Two pairs in a row",
        effectDescription = "On click: flip a selected dice to its opposite value (1 -> 6, 2 -> 5...).",
        shortEffectDescription = "Click: flip a die",
        costFunction = Dice::isPair,
        clickCostFunction = Dice::isPair,
        click = GameViewModel::modPlus,
    ),
    Blueprint(
        "Transporter",
        costDescription = "Three dice of value 2, 4 and 6.",
        shortCostDescription = "2, 4, 6",
        effectDescription = "On start of turn: gain +1 MOD.",
        shortEffectDescription = "Start of turn:\n+1 MOD",
        costFunction = Dice::isPair,
        clickCostFunction = Dice::isPair,
        click = GameViewModel::modPlus,
    ),
)